<?php

require_once ( dirname(__FILE__) . '/includes/toonchat.inc');
require_once ( dirname(__FILE__) . '/includes/configs.inc');

require_once ( dirname(__FILE__) . '/includes/utility.inc');

// libraries firebase
require ( dirname(__FILE__) . '/libraries/firebase/autoload.php'); 

function toonchat_init()
{
  // dpm("k init");
}

/*
 * hook_help()
 * */
function toonchat_help($path, $arg)
{
  switch ($path) {
    case 'admin/help#toonchat':
      return t('toonchat module');
    default:
      break;
  }
}


/**
 * Implements hook_permission().
 */
function toonchat_permission() {
  return array(
    'toonchat_test' => array(
      'title' => t('toonchat Test Function.'),
    )
  );
}

/*
 * hook_user_insert()
 * this hook triggered when a user registered . you can implement it in your custom module.
*/
function toonchat_user_insert(&$edit, $account, $category) {
  // watchdog(TAG, 'Add New User = %uid', array('%uid' => $account->uid), WATCHDOG_INFO);

  if (!empty($_REQUEST['platform']) && !empty($_REQUEST['bundleidentifier'])) {
    switch ($_REQUEST['platform']) {
      case 'ios':
      case 'android':{
          $firebase = new \Firebase\FirebaseLib(FIREBASE_DEFAULT_URL);

          // add profile ให้กับ user
          $values = array("profiles"=>array(
                          "name"            => $account->name,
                          "mail"            => $account->mail,
                          "udid"            => $_REQUEST['udid'],
                          "platform"        => $_REQUEST['platform'],
                          "bundleidentifier"=> $_REQUEST['bundleidentifier'],
                          "version"         => $_REQUEST['version'],
                          "create"          => time(),
                          "update"          => time()
                        ));
          
          $firebase->set(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $account->uid . '/', $values);

          // Check is Friend ?, if is not is add friend 
          foreach (load_user() as $key => $value){
            if ($account->uid != $key) {

              $chat_id = generateRandomString(DEFUALT_LENGTH_CHAT_ID);

              if($firebase->get(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $account->uid . '/friends/' + $key +"/") == 'null') {
                  $values = array(
                    "status"       => 'friend',
                    "chat_id"      => $chat_id,
                    "create"       => time()
                  );
                  $firebase->set(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $account->uid . '/friends/' . $key . "/", $values);
              }

              if($firebase->get(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $key . '/friends/' + $account->uid +"/") == 'null') {
                  $values = array(
                    "status"       => 'friend',
                    "chat_id"      => $chat_id,
                    "create"       => time()
                  );
                  $firebase->set(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $key . '/friends/' . $account->uid . "/", $values);
              }
            }
          }  
        }
        break;
      
      default:
        # code...
        break;
    }
  }else{
      // เกิดจากเราใช้ระบบหลังบ้านเราสร้างขึ้น
      $firebase = new \Firebase\FirebaseLib(FIREBASE_DEFAULT_URL);

      // add profile ให้กับ user
      $values = array("profiles"=>array(
                          "name"            => $account->name,
                          "mail"            => $account->mail,
                          "udid"            => 'auto-udid',
                          "platform"        => 'auto-platform',
                          "bundleidentifier"=> 'auto-bundleidentifier',
                          "version"         => 'auto-version',
                          "create"          => time(),
                          "update"          => time()
                        ));
          
      $firebase->set(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $account->uid . '/', $values);

      // Check is Friend ?, if is not is add friend 
      foreach (load_user() as $key => $value){
        if ($account->uid != $key) {

          $chat_id = generateRandomString(DEFUALT_LENGTH_CHAT_ID);

          if($firebase->get(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $account->uid . '/friends/' + $key +"/") == 'null') {
              $values = array(
                "status"       => 'friend',
                "chat_id"      => $chat_id,
                "create"       => time()
              );
              $firebase->set(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $account->uid . '/friends/' . $key . "/", $values);
          }

          if($firebase->get(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $key . '/friends/' + $account->uid +"/") == 'null') {
              $values = array(
                "status"       => 'friend',
                "chat_id"      => $chat_id,
                "create"       => time()
              );
              $firebase->set(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $key . '/friends/' . $account->uid . "/", $values);
          }
        }
      }  
  }
}

/*
 hook_user_delete($account)
*/
function toonchat_user_delete($account){
  // dpm($account);
  $firebase = new \Firebase\FirebaseLib(FIREBASE_DEFAULT_URL);
  if ($firebase->get(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $account->uid) != 'null') {
    // 

    /*  
      เรา้ต้อง scan หาเพือนเพื่อจะไปลบ คนที่เราเป้นเพือนด้วย
    */
    $json = $firebase->get(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $account->uid . '/friends/');
    // dpm(gettype($values));
    $obj = json_decode($json, TRUE);
  
    foreach($obj as $key => $value) {
      $firebase->delete(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $key . '/friends/' . $account->uid);
    }
    $firebase->delete(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $account->uid);
  }
}

/*
 * hook_menu()
 */
function toonchat_menu() 
{ 

  // $items['toonchat/delete'] = array(
  //   'title' => t('ทดสอบ function delete'),
  //   'page callback' => '_delete',
  //   'access arguments' => array('toonchat_test'),
  //   // 'access callback' => TRUE,
  //   'type' => MENU_NORMAL_ITEM,
  // );
  $items['toonchat/test'] = array(
    'title' => t('ทดสอบ function'),
    'page callback' => '_toonchat_test',
    'access arguments' => array('toonchat_test'),
    // 'access callback' => TRUE,
    'type' => MENU_NORMAL_ITEM,
  );

  $items['toonchat/upload_file'] = array(
    'title' => t('ทดสอบ การ upload file'),
    'page callback' => '_toonchat_upload_file',
    'access arguments' => array('toonchat_test'),
    // 'access callback' => TRUE,
    'type' => MENU_NORMAL_ITEM,
  );


   $items['toonchat/test_create_friend'] = array(
    'title' => t('ทดสอบ function'),
    'page callback' => 'test_create_friend',
    'access arguments' => array('toonchat_test'),
    // 'access callback' => TRUE,
    'type' => MENU_NORMAL_ITEM,
  );


    $items['toonchat/test_create_message'] = array(
    'title' => t('ทดสอบ สร้าง message'),
    'page callback' => 'test_create_message',
    'access arguments' => array('toonchat_test'),
    // 'access callback' => TRUE,
    'type' => MENU_NORMAL_ITEM,
  );

     $items['toonchat/test_create_group'] = array(
    'title' => t('ทดสอบ สร้างกลุ่ม'),
    'page callback' => 'test_create_group',
    'access arguments' => array('toonchat_test'),
    // 'access callback' => TRUE,
    'type' => MENU_NORMAL_ITEM,
  );
    

  return $items;
}


/*
 * 
*/
function  _toonchat_test(){
  global $user;
  dpm($user);
  return "_toonchat_test";
}

function  test_create_friend(){

  $firebase = new \Firebase\FirebaseLib(FIREBASE_DEFAULT_URL);

  foreach (load_user() as $key => $value){
    // echo $value->uid . "</br>"; 

    foreach (load_user() as $key2 => $value2){

        if($key != $key2){
          $values = array(
            "status"       => 'friend',
            "create"       => time()
          );
    
          $firebase->set(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $key . '/friends/' . $key2 . "/", $values);
        }
    }
  }
  return "_toonchat_test";
}

function test_create_group(){
  $user = 802;

  // invite_groups

  /*
  $name_group = generateRandomString(10);

  $firebase = new \Firebase\FirebaseLib(FIREBASE_DEFAULT_URL);

  foreach (load_user() as $key => $value){
    if ($user != $key) {
        # code...

        $values = array(
          "status"       => 'padding',
          "create"       => time()
        );
    
        $firebase->set(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $user . '/groups/' . $name_group . "/" . $key. "/", $values);

        $values = array(
          "status"       => 'invite',
          "create"       => time()
        );
        $firebase->set(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $key . '/invite_group/' . $name_group . "/", $values);

    }
  }
  */


  return "test_create_group";
}

function load_user(){
  $uids = db_select('users', 'ur')
        ->fields('ur', array('uid'))
        // ->condition('ur.uid', $uid, '!=')
        // ->condition('ur.uid', 0, '!=')
        // ->condition('ur.uid', 1, '!=')
        ->condition('ur.uid', 0, '!=')
        ->condition('ur.uid', 1, '!=')
        ->execute()
        ->fetchCol();

  $mul_users =  user_load_multiple($uids);

  return $mul_users;
}

function generateRandomString($length = 10) {
    $characters = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
    $charactersLength = strlen($characters);
    $randomString = '';
    for ($i = 0; $i < $length; $i++) {
        $randomString .= $characters[rand(0, $charactersLength - 1)];
    }
    return $randomString;
}

/*
 * Implemantation of hook_services_resources()
 * 
*/
function toonchat_services_resources()
{
  $services = array(
    'annmousu'=>array(
      'create' =>array(
        'help'=>'Services User anonymous',
        'callback'=>'annmousu',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
      ),
    ),
    'toonchat_user_logout'=>array(
      'create' =>array(
        'help'=>'Services Custom User logout',
        'callback'=>'_toonchat_user_logout',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
        'args' => array(
          array(
              'name' => 'uid',
              'type' => 'string',
              'description' => 'A valid username',
              'source' => array('data' => 'uid'),
              'optional' => FALSE,
            ),
        ),
      ),
    ),
    'update_picture_profile'=>array(
      'create' =>array(
        'help'=>'Update Profile',
        'callback'=>'update_picture_profile',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
        /* กรณีที่เราต้องการ pass parameter */
        'args' => array(
          array(
           'name' => 'parameters',
           'type' => 'array',
           'description' => '',
           'source' => 'param',
           'optional' => TRUE,
           'default value' => array(),
          ),
        ),
      ),
    ),
    'update_my_profile'=>array(
      'create' =>array(
        'help'=>'Services แก้ไข Display Name, Status ของ User',
        'callback'=>'update_my_profile',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
      ),
    ),

    // 'create_group_chat'=>array(
    //   'create' =>array(
    //     'help'=>'Services สร้าง Group Chat : param uid, name(ชื่อกลุ่ม),image, members(array)',
    //     'callback'=>'create_grouuid, imagep_chat',
    //     'access callback' => 'user_access',
    //     'access arguments' => array('access content'),
    //     'access arguments append' => FALSE,
    //   ),
    // ),

    'create_group_chat'=>array(
      'create' =>array(
        'help'=>'Services สร้าง Group Chat : param uid, name(ชื่อกลุ่ม),image, members(array)',
        'callback'=>'create_group_chat',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
        /* กรณีที่เราต้องการ pass parameter */
        'args' => array(
          array(
           'name' => 'parameters',
           'type' => 'array',
           'description' => '',
           'source' => 'param',
           'optional' => TRUE,
           'default value' => array(),
          ),
        ),
      ),
    ),

     'update_profile_group'=>array(
      'create' =>array(
        'help'=>'Update Profile Group : name, picture',
        'callback'=>'update_profile_group',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
        /* กรณีที่เราต้องการ pass parameter */
        'args' => array(
          array(
           'name' => 'parameters',
           'type' => 'array',
           'description' => '',
           'source' => 'param',
           'optional' => TRUE,
           'default value' => array(),
          ),
        ),
      ),
    ),
    'delete_group_chat'=>array(
      'create' =>array(
        'help'=>'Services สร้าง Delete Chat : param uid, group_id',
        'callback'=>'delete_group_chat',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
        /* กรณีที่เราต้องการ pass parameter */
        'args' => array(
          array(
           'name' => 'parameters',
           'type' => 'array',
           'description' => '',
           'source' => 'param',
           'optional' => TRUE,
           'default value' => array(),
          ),
        ),
      ),
    ),

    'group_invite_new_members'=>array(
      'create' =>array(
        'help'=>'Services การเพิ่ม member ใหม่ใน Group : param uid, group_id, members(array)',
        'callback'=>'group_invite_new_members',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
        /* กรณีที่เราต้องการ pass parameter */
        'args' => array(
          array(
           'name' => 'parameters',
           'type' => 'array',
           'description' => '',
           'source' => 'param',
           'optional' => TRUE,
           'default value' => array(),
          ),
        ),
      ),
    ),

    'group_delete_members'=>array(
      'create' =>array(
        'help'=>'Services การลบ member ใน Group : param uid, group_id, member_id',
        'callback'=>'group_delete_members',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
        /* กรณีที่เราต้องการ pass parameter */
        'args' => array(
          array(
           'name' => 'parameters',
           'type' => 'array',
           'description' => '',
           'source' => 'param',
           'optional' => TRUE,
           'default value' => array(),
          ),
        ),
      ),
    ),

    'create_muti_chat'=>array(
      'create' =>array(
        'help'=>'Services สร้าง Multi Chat : param uid, members(array)',
        'callback'=>'create_muti_chat',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
        /* กรณีที่เราต้องการ pass parameter */
        'args' => array(
          array(
           'name' => 'parameters',
           'type' => 'array',
           'description' => '',
           'source' => 'param',
           'optional' => TRUE,
           'default value' => array(),
          ),
        ),
      ),
    ),
    // muti_chat_invite_new_members
    'muti_chat_invite_new_members'=>array(
      'create' =>array(
        'help'=>'Services: เป้นการ invite เพื่อนใหม่เข้า multi chat Multi Chat : param uid, group_id ,members(array)',
        'callback'=>'muti_chat_invite_new_members',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
        /* กรณีที่เราต้องการ pass parameter */
        'args' => array(
          array(
           'name' => 'parameters',
           'type' => 'array',
           'description' => '',
           'source' => 'param',
           'optional' => TRUE,
           'default value' => array(),
          ),
        ),
      ),
    ),

    'multi_chat_delete_members'=>array(
      'create' =>array(
        'help'=>'Services ลบสมาชิก Multi Chat : param uid, member_id',
        'callback'=>'multi_chat_delete_members',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
        /* กรณีที่เราต้องการ pass parameter */
        'args' => array(
          array(
           'name' => 'parameters',
           'type' => 'array',
           'description' => '',
           'source' => 'param',
           'optional' => TRUE,
           'default value' => array(),
          ),
        ),
      ),
    ),

    'delete_multi_chat'=>array(
      'create' =>array(
        'help'=>'Services สร้าง Delete Multi Chat : param uid, multi_id',
        'callback'=>'delete_multi_chat',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
        /* กรณีที่เราต้องการ pass parameter */
        'args' => array(
          array(
           'name' => 'parameters',
           'type' => 'array',
           'description' => '',
           'source' => 'param',
           'optional' => TRUE,
           'default value' => array(),
          ),
        ),
      ),
    ),

  );
  
  return $services;
}

function annmousu(){
  $result = array();

  if (empty($_REQUEST['udid'])) {
    $result['result']   = FALSE;
    $result['message']  = "Empty Parameter.";
    return $result;
  }

  // เช็กว่ามี  user ที่มี email แล้วหรือไม
  if (user_load_by_mail($_REQUEST['udid'] . '@annmousu') == "") {
    // add new user
    $new_user = array(
      'name' => generate_name_annmousu($_REQUEST['udid']),
      'pass' => DEFUALT_PASSWORD, // note: do not md5 the password
      'mail' => $_REQUEST['udid'] . '@annmousu',
      'status' => 1,
      'init' => $_REQUEST['udid'] . '@annmousu',
      'roles' => array(
        DRUPAL_AUTHENTICATED_RID => 'authenticated user'
      ),
    );

    // The first parameter is sent blank so a new user is created.
    user_save('', $new_user);    
  }

  module_load_include('inc', 'services', 'resources/user_resource');
  

  $result['result']   = TRUE;

  $u = _user_resource_login(generate_name_annmousu($_REQUEST['udid']), DEFUALT_PASSWORD);
  $result['data']     =   $u;
  $result['uid']      =   $u->user;

  return $result;
}

function _toonchat_user_logout($uid)
{
  	$result = array();

	if ($uid > 0 && $uid != "") {
	  	# code...
	  	$user_fields = user_load($uid);

	  	if (!$user_fields->uid) {
	    	// User is not logged in
	    	//services_error(t('User is not logged in.'), 406);

	    	$result['result'] = FALSE;
  			$result['output'] = "uid not match is user";
	  	}

	  	watchdog('user', 'Service : Session closed for %name.', array('%name' => $user_fields->name));

	  	// Destroy the current session.
	 	  module_invoke_all('user_logout', $user_fields);
	  	session_destroy();

  		// Load the anonymous user.
  		// $user_fields = drupal_anonymous_user();

  		$result['result'] = TRUE;
  		$result['output'] = "";
  	}else{

  		$result['result'] = FALSE;
  		$result['output'] = "$uid > 0 && $uid != '' == FALSE";
  	}
	return $result;
}


function _patumwan_test() {
  global $user;

  dpm($user);
}

function update_picture_profile(){
  $result = array();

  if (empty($_REQUEST['uid']) || empty($_REQUEST['image'])) {
    $result['result'] = FALSE;
    return $result;
  }

  $profile = profile2_by_uid_load($_REQUEST['uid'], 'main');

  if($_REQUEST['image'] != ""){

    $image = $_POST['image'];

    // http://stackoverflow.com/questions/8241242/drupal-7-upload-image-programatically
    $binary = base64_decode($image);

    //Create the directory if it does not already exist, otherwise check the permissions
    $directory = 'public://';
    file_prepare_directory($directory, FILE_CREATE_DIRECTORY);

    $currentDate = date("Ymd");
    $name  = $currentDate .'_'. rand(0, 999) . rand(0, 999) . rand(0, 999) . ".png";
    
    //Saves a file to the specified destination and creates a database entry.
    $file = klovers_file_save_data($_POST['uid'], $binary, $directory. '/' . $name, FILE_EXISTS_RENAME);

    // save รูป profile
    $profile->field_profile_image[LANGUAGE_NONE][0] = (array)$file;

  }

  profile2_save($profile);


  // url image profile
  $url = file_create_url($profile->field_profile_image[LANGUAGE_NONE][0]['uri']);

  // Firebase : update image url profile
  $firebase = new \Firebase\FirebaseLib(FIREBASE_DEFAULT_URL);
  $data_update = array(
      "image_url"  =>$url
  );

  $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH .  $_REQUEST['uid'] ."/profiles/", $data_update);
  // Firebase : update image url profile


  $result['result'] = TRUE;  
  $result['url'] = $url;

  return $result;
}

function update_my_profile(){

  $result = array();

  if (empty($_REQUEST['uid'])) {
    $result['result'] = FALSE;
    $result['uid']    = "empty uid.";
    return $result;
  }

  // Load Profile ขึ้นมาเพือจะทำการแก้ไข
  $profile = profile2_by_uid_load($_REQUEST['uid'], 'main');
  $profile->field_profile_name[LANGUAGE_NONE][0]['value'] = $_REQUEST['name'];
  $profile->field_profile_display_name[LANGUAGE_NONE][0]['value'] = $_REQUEST['name'];
  $profile->field_profile_status_message[LANGUAGE_NONE][0]['value'] = $_REQUEST['status_message'];

  profile2_save($profile);

  // Firebase : udate name, status message
  $firebase = new \Firebase\FirebaseLib(FIREBASE_DEFAULT_URL);
  $data_update = array(
      "name"           =>$_REQUEST['name'],
      "status_message" => $_REQUEST['status_message']
  );

  $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH .  $_REQUEST['uid'] ."/profiles/", $data_update);
  // Firebase : udate name, status message


  $result['result'] = TRUE;
  return  $result;
}

function create_group_chat(){
  $result = array();

  if (empty($_REQUEST['uid'])) {
    $result['result'] = FALSE;
    $result['message']    = "empty uid.";
    return $result;
  }
  
  // chat_id เป้น id ที่ไว้สำหรับอ้างอิงเป้น chat id  
  $chat_id = generateRandomString(DEFUALT_LENGTH_CHAT_ID);

  $profile = profile2_by_uid_load($_REQUEST['uid'], 'main');

  $values = array();
  $values['field_name'] = 'field_profile_group'; 

  // #1 chat_id
  $values['field_object_id'][LANGUAGE_NONE][0]['value'] = $chat_id;


  $image_url = array();
  if($_REQUEST['image'] != ""){

    $image = $_POST['image'];

    // http://stackoverflow.com/questions/8241242/drupal-7-upload-image-programatically
    $binary = base64_decode($image);

    //Create the directory if it does not already exist, otherwise check the permissions
    $directory = 'public://';
    file_prepare_directory($directory, FILE_CREATE_DIRECTORY);

    $currentDate = date("Ymd");
    $name  = $currentDate .'_'. rand(0, 999) . rand(0, 999) . rand(0, 999) . ".png";
    
    //Saves a file to the specified destination and creates a database entry.
    $file = klovers_file_save_data($_POST['uid'], $binary, $directory. '/' . $name, FILE_EXISTS_RENAME);

    // save รูป profile
    // $profile->field_profile_image[LANGUAGE_NONE][0] = (array)$file;

    $image_url= (array)$file;
  }

  // #2 fiele_picture_group
  $values['field_picture_group'][LANGUAGE_NONE][0] = $image_url;
  
  
  // #3 field_name_group
  $values['field_name_group'][LANGUAGE_NONE][0]['value'] = $_REQUEST['name'];

  // #4 field_status_group
  $values['field_status_group'][LANGUAGE_NONE][0]['value'] = 'active';

  // Create the field collection entry and associate it with the profile
  $field_entity = entity_create('field_collection_item', $values);
  $field_entity->setHostEntity('profile2', $profile);
  $field_entity->save();
 
  // เป็น node id ของ group
  $group_id = $field_entity->item_id;

  // load field_profile_group by id ขึ้นมาเพือ insert  field_members_group ลงไป
  $data_profile_group = field_collection_item_load($group_id);

  $members = array();
  foreach ($_REQUEST['members'] as $key => $value){
    $values_profile_group = array();
    $values_profile_group['field_name'] = 'field_members_group'; 
    $values_profile_group['field_members_group_friend_id'][LANGUAGE_NONE][0]['value'] = $value;
    $values_profile_group['field_members_group_status'][LANGUAGE_NONE][0]['value'] = "pedding";

    $field_entity_members_group = entity_create('field_collection_item', $values_profile_group);
    $field_entity_members_group->setHostEntity("field_members_group", $data_profile_group);
    $field_entity_members_group->save(); 

    /*
    $field_entity_members_group->item_id : node id ของ member 
    $value  : เป็น friend id
    $status : สถานะ 3 status : accept, pedding, reject
    */
    $members[$field_entity_members_group->item_id] = array("friend_id"=>$value, "status"=>"pedding");
  }

  $firebase = new \Firebase\FirebaseLib(FIREBASE_DEFAULT_URL);
  $f_value = array(
      "chat_id"  => $chat_id,               // เป็น chat_id ของ group           
      "create"   => time(),
      "name"     => $_REQUEST['name'],
      // เราจะไม่เอา path host เราจะเอาเฉพาะ ex. /sites/default/files/20171003_570645200.png
      "image_url"=> substr(file_create_url($image_url['uri']), strlen($GLOBALS['base_url'])),
      "members"  => $members,
      "owner_id" => $_REQUEST['uid'],
      "status"   => 'active'
  );

  $firebase->set(FIREBASE_LOGIN_PATH . $_REQUEST['uid'] . '/' . PATH_GROUPS . '/' . $group_id . '/' , $f_value);

  $result['result'] = TRUE;
  $result['data']   = $_REQUEST; 

  return  $result;
}

function update_profile_group(){
  $result = array();

  if (empty($_REQUEST['uid']) || empty($_REQUEST['group_id']) || empty($_REQUEST['image'])) {
    $result['result'] = FALSE;
    return $result;
  }

  if($_REQUEST['image'] != ""){

    $image = $_REQUEST['image'];

    // http://stackoverflow.com/questions/8241242/drupal-7-upload-image-programatically
    $binary = base64_decode($image);

    //Create the directory if it does not already exist, otherwise check the permissions
    $directory = 'public://';
    file_prepare_directory($directory, FILE_CREATE_DIRECTORY);

    $currentDate = date("Ymd");
    $name  = $currentDate .'_'. rand(0, 999) . rand(0, 999) . rand(0, 999) . ".png";
    
    //Saves a file to the specified destination and creates a database entry.
    $file = klovers_file_save_data($_POST['uid'], $binary, $directory. '/' . $name, FILE_EXISTS_RENAME);

    // save รูป profile
    // $profile->field_profile_image[LANGUAGE_NONE][0] = (array)$file;

    $image_url= (array)$file;


    $data = field_collection_item_load($_REQUEST['group_id']);
    $wrapper = entity_metadata_wrapper('field_collection_item', $data);
      
    $wrapper->field_name_group->set($_REQUEST['name']);
    $wrapper->field_picture_group->set((array)$file);
    $wrapper->save();

    $firebase = new \Firebase\FirebaseLib(FIREBASE_DEFAULT_URL);
    $f_value = array(
      "update"   => time(),
      "name"     => $_REQUEST['name'],
      "image_url"=> substr(file_create_url($image_url['uri']), strlen($GLOBALS['base_url']))
    );

    $firebase->update(FIREBASE_LOGIN_PATH . $_REQUEST['uid'] . '/' . PATH_GROUPS . '/' . $_REQUEST['group_id'] .'/' , $f_value);
  }


  $result['result'] = TRUE;  
  $result['_REQUEST'] = $_REQUEST;

  return $result;

}

function delete_group_chat(){
  $result = array();
  if (empty($_REQUEST['uid']) || empty($_REQUEST['group_id'])) {
    $result['result'] = FALSE;
    $result['data']   = $_REQUEST; 
    $result['message']    = "uid | group id empty.";
    return $result;
  }

  // ลบ group ออกตาม group id
  $data_item_load = field_collection_item_load($_REQUEST['group_id']);

  $wrapper = entity_metadata_wrapper('field_collection_item', $data_item_load);    
  entity_delete_multiple('field_collection_item', array($wrapper->getIdentifier()));

  $result['result'] = TRUE;
  $result['data']   = $_REQUEST; 

  if(!empty($_REQUEST['text_array'])){
    $result['gettype'] = gettype($_REQUEST['text_array']);
  }

  return  $result;
}

function group_invite_new_members(){
  $result = array();

  if (empty($_REQUEST['uid']) || empty($_REQUEST['group_id'])) {
    $result['result'] = FALSE;
    $result['data']   = $_REQUEST; 
    $result['message']    = "uid | group id empty.";
    return $result;
  }

  // $members = array();
  // foreach ($_REQUEST['members'] as $key => $value){
  //   $members[$key] =  $value; 
  // }

  $firebase = new \Firebase\FirebaseLib(FIREBASE_DEFAULT_URL);

  // load field_profile_group by id ขึ้นมาเพือ insert  field_members_group ลงไป
  $data_group = field_collection_item_load($_REQUEST['group_id']);

  $members = array();
  foreach ($_REQUEST['members'] as $key => $value){
    $values_members_group = array();
    $values_members_group['field_name'] = 'field_members_group'; 
    $values_members_group['field_members_group_friend_id'][LANGUAGE_NONE][0]['value'] = $value;
    $values_members_group['field_members_group_status'][LANGUAGE_NONE][0]['value'] = "pedding";

    $field_entity_members_group = entity_create('field_collection_item', $values_members_group);
    $field_entity_members_group->setHostEntity("field_members_group", $data_group);
    $field_entity_members_group->save(); 

    /*
    $field_entity_members_group->item_id : node id ของ member 
    $value  : เป็น friend id
    $status : สถานะ 3 status : accept, pedding, reject
    */
    // $members[$field_entity_members_group->item_id] = array("friend_id"=>$value, "status"=>"pedding");

    // $members[$field_entity_members_group->item_id] = array("friend_id"=>$value, "status"=>"pedding");

    /*
      เราต้อง เพิ่ม /groups/{group_id}/members/ ของ firebase
    */ 
    $firebase->set(FIREBASE_LOGIN_PATH . $_REQUEST['uid'] . '/' . PATH_GROUPS . '/' . $_REQUEST['group_id'] . '/members/' . $field_entity_members_group->item_id . '/' , array("friend_id"=>$value, "status"=>"pedding"));
  }

  $result['result'] = TRUE;
  $result['data']   = $_REQUEST; 
  $result['members']= $members;

  return  $result;
}

/*
        'help'=>'Services การลบ member ใน Group : param uid, group_id, member_id',
        'callback'=>'group_delete_members',
*/
function group_delete_members(){
  $result = array();

  if (empty($_REQUEST['uid']) || empty($_REQUEST['group_id']) || empty($_REQUEST['member_id'])) {
    $result['result'] = FALSE;
    $result['data']   = $_REQUEST; 
    $result['message']    = "uid | group id | members id empty.";
    return $result;
  }

  // $data_item_load = field_collection_item_load($_REQUEST['member_id']);
  // $wrapper = entity_metadata_wrapper('field_collection_item', $data_item_load);    
  // entity_delete_multiple('field_collection_item', array($wrapper->getIdentifier()));

  if(!empty($_REQUEST['text_array'])){
    $result['gettype'] = gettype($_REQUEST['text_array']);
  }


  entity_delete_multiple('field_collection_item', array($_REQUEST['member_id']));

  $result['result'] = TRUE;
  $result['data']   = $_REQUEST; 

  return  $result;

}

function create_muti_chat(){
  $result = array();

  if (empty($_REQUEST['uid']) || empty($_REQUEST['members'])) {
    $result['result'] = FALSE;
    $result['data']   = $_REQUEST; 
    $result['message']    = "uid | group id | members id empty.";
    return $result;
  }


  // chat_id เป้น id ที่ไว้สำหรับอ้างอิงเป้น chat id  
  $chat_id = generateRandomString(DEFUALT_LENGTH_CHAT_ID);

  $profile = profile2_by_uid_load($_REQUEST['uid'], 'main');

  $values = array();
  $values['field_name'] = 'field_profile_multi_chat'; 

  // #1 chat_id
  $values['field_object_id'][LANGUAGE_NONE][0]['value']     = $chat_id;
  $values['field_owner_id'][LANGUAGE_NONE][0]['value']      = $_REQUEST['uid'];
  $values['field_status_group'][LANGUAGE_NONE][0]['value']  = "active";

    // Create the field collection entry and associate it with the profile
  $field_entity = entity_create('field_collection_item', $values);
  $field_entity->setHostEntity('profile2', $profile);
  $field_entity->save();

  // เป็น node id ของ group

  // load field_profile_group by id ขึ้นมาเพือ insert  field_members_group ลงไป
  $data_multi_chat = field_collection_item_load($field_entity->item_id);

  $members = array();
  foreach ($_REQUEST['members'] as $key => $value){
    $values_members_group = array();
    $values_members_group['field_name'] = 'field_members_multi_chat'; 
    $values_members_group['field_friend_uid'][LANGUAGE_NONE][0]['value'] = $value;
    $values_members_group['field_members_multi_status'][LANGUAGE_NONE][0]['value'] = "pedding";

    $field_entity_members_group = entity_create('field_collection_item', $values_members_group);
    $field_entity_members_group->setHostEntity("field_members_multi_chat", $data_multi_chat);
    $field_entity_members_group->save(); 

    $members[$field_entity_members_group->item_id] = array("friend_id"=>$value, "status"=>"pedding");
  }

  $firebase = new \Firebase\FirebaseLib(FIREBASE_DEFAULT_URL);
  $f_value = array(
      "chat_id"  => $chat_id,               // เป็น chat_id ของ group           
      "create"   => time(),
      "members"  => $members,
      "owner_id" => $_REQUEST['uid'],
      "status"   => 'active'
  );

  $firebase->set(FIREBASE_LOGIN_PATH . $_REQUEST['uid'] . '/' . PATH_MULTI_CHAT . '/' . $field_entity->item_id  . '/' , $f_value);

  $result['result'] = TRUE;
  $result['data']   = $_REQUEST; 
  return  $result;
}

/*
  เป้นการ invite เพื่อนใหม่เข้า multi chat
*/
function muti_chat_invite_new_members(){
  $result = array();

  if (empty($_REQUEST['uid']) || empty($_REQUEST['members']) || empty($_REQUEST['group_id'])) {
    $result['result'] = FALSE;
    $result['data']   = $_REQUEST; 
    $result['message']    = "uid | group id | members id empty.";
    return $result;
  }


  $firebase = new \Firebase\FirebaseLib(FIREBASE_DEFAULT_URL);

  // load field_profile_group by id ขึ้นมาเพือ insert  field_members_group ลงไป
  $data_group = field_collection_item_load($_REQUEST['group_id']);

  $members = array();
  foreach ($_REQUEST['members'] as $key => $value){
    $values_members_group = array();
    $values_members_group['field_name'] = 'field_members_multi_chat'; 
    $values_members_group['field_friend_uid'][LANGUAGE_NONE][0]['value'] = $value;
    $values_members_group['field_members_multi_status'][LANGUAGE_NONE][0]['value'] = "pedding";

    $field_entity_members_group = entity_create('field_collection_item', $values_members_group);
    $field_entity_members_group->setHostEntity("field_members_multi_chat", $data_group);
    $field_entity_members_group->save(); 

    /*
    $field_entity_members_group->item_id : node id ของ member 
    $value  : เป็น friend id
    $status : สถานะ 3 status : accept, pedding, reject
    */
    // $members[$field_entity_members_group->item_id] = array("friend_id"=>$value, "status"=>"pedding");

    // $members[$field_entity_members_group->item_id] = array("friend_id"=>$value, "status"=>"pedding");

    /*
      เราต้อง เพิ่ม /groups/{group_id}/members/ ของ firebase
    */ 
    $firebase->set(FIREBASE_LOGIN_PATH . $_REQUEST['uid'] . '/' . PATH_MULTI_CHAT . '/' . $_REQUEST['group_id'] . '/members/' . $field_entity_members_group->item_id . '/' , array("friend_id"=>$value, "status"=>"pedding"));
  }

  $result['result'] = TRUE;
  $result['data']   = $_REQUEST; 
  $result['function'] = "muti_chat_invite_new_members";
  return  $result;
}

/*
    'multi_chat_delete_members'=>array(
      'create' =>array(
        'help'=>'Services ลบสมาชิก Multi Chat : param uid, member_id',
*/
function multi_chat_delete_members(){
  $result = array();

  if (empty($_REQUEST['uid']) || empty($_REQUEST['member_id'])) {
    $result['result'] = FALSE;
    $result['data']   = $_REQUEST; 
    $result['message']    = "uid | group id | members id empty.";
    return $result;
  }

  // $data_item_load = field_collection_item_load($_REQUEST['member_id']);
  // $wrapper = entity_metadata_wrapper('field_collection_item', $data_item_load);    
  // entity_delete_multiple('field_collection_item', array($wrapper->getIdentifier()));

  if(!empty($_REQUEST['text_array'])){
    $result['gettype'] = gettype($_REQUEST['text_array']);
  }


  entity_delete_multiple('field_collection_item', array($_REQUEST['member_id']));

  $result['result'] = TRUE;
  $result['data']   = $_REQUEST; 

  return  $result;

}

function delete_multi_chat(){
  $result = array();
  if (empty($_REQUEST['uid']) || empty($_REQUEST['multi_id'])) {
    $result['result'] = FALSE;
    $result['data']   = $_REQUEST; 
    $result['message']    = "uid | multi_id id empty.";
    return $result;
  }

  // ลบ group ออกตาม multi chat id
  entity_delete_multiple('field_collection_item', array($_REQUEST['multi_id']));

  $result['result'] = TRUE;
  $result['data']   = $_REQUEST; 

  if(!empty($_REQUEST['text_array'])){
    $result['gettype'] = gettype($_REQUEST['text_array']);
  }

  return  $result;
}
